---
import Input from "../../components/ui/input.astro";
import ToolLayout from "../../layouts/ToolLayout.astro";
---

<ToolLayout
  title="Random color - Thingbomb"
  shortTitle="Random color"
  description="Quickly generate a random color."
>
  <button
    id="randomColor"
    class="h-9 rounded-md border-1 mt-2 bg-blue-600 disabled:opacity-50 disabled:!scale-100 disabled:cursor-not-allowed border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-[1.02] flex items-center justify-center"
  >
    Generate color
  </button>
  <div
    id="copy-options"
    class="grid grid-cols-1 gap-2 pt-2"
    style="display: none;"
  >
    <button
      id="copy-rgb"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-[1.02] flex items-center justify-center"
    >
      RGB
    </button>
    <button
      id="copy-hex"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-[1.02] flex items-center justify-center"
    >
      HEX
    </button>
    <button
      id="copy-hsl"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-[1.02] flex items-center justify-center"
    >
      HSL
    </button>
  </div>
</ToolLayout>

<script is:inline>
  const button = document.getElementById("randomColor");
  const copyHex = document.getElementById("copy-hex");
  const copyRgb = document.getElementById("copy-rgb");
  const copyHsl = document.getElementById("copy-hsl");
  const copyOptions = document.getElementById("copy-options");

  button.addEventListener("click", () => {
    const randomRed = Math.floor(Math.random() * 256);
    const randomGreen = Math.floor(Math.random() * 256);
    const randomBlue = Math.floor(Math.random() * 256);
    const rgb = `rgb(${randomRed}, ${randomGreen}, ${randomBlue})`;
    const hex = rgbToHex(randomRed, randomGreen, randomBlue);
    const hsl = rgbToHsl(randomRed, randomGreen, randomBlue);

    copyRgb.style.backgroundColor = hex;
    copyRgb.style.color = getTextColor(hex);
    copyOptions.style.display = "grid";

    setupCopy(copyHex, hex);
    setupCopy(copyRgb, rgb);
    setupCopy(copyHsl, hsl);

    copyHex.textContent = hex;
    copyRgb.textContent = rgb;
    copyHsl.textContent = hsl;
  });

  function setupCopy(el, text) {
    el.onclick = () => {
      navigator.clipboard.writeText(text);
      const original = el.textContent;
      el.textContent = "Copied!";
      setTimeout(() => (el.textContent = original), 1000);
    };
  }

  function rgbToHex(r, g, b) {
    return "#" + [r, g, b].map((x) => x.toString(16).padStart(2, "0")).join("");
  }

  function rgbToHsl(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    let h = 0,
      s = 0,
      l = (max + min) / 2;

    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }

    return `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;
  }

  function getTextColor(bgColor) {
    const temp = document.createElement("div");
    temp.style.color = bgColor;
    document.body.appendChild(temp);
    const computed = getComputedStyle(temp).color;
    document.body.removeChild(temp);

    const match = computed.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    if (!match) return "black";

    const [r, g, b] = match.slice(1, 4).map(Number);

    const toLinear = (c) => {
      c /= 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    };
    const luminance =
      0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);

    const whiteContrast = 1.05 / (luminance + 0.05);
    const blackContrast = (luminance + 0.05) / 0.05;

    return whiteContrast > blackContrast ? "white" : "black";
  }
</script>
