---
import Input from "../../components/ui/input.astro";
import ToolLayout from "../../layouts/ToolLayout.astro";
---

<ToolLayout
  title="Color mixer - free online tools"
  shortTitle="Color mixer"
  description="Mix colors quickly with this free online tool."
>
  <div class="flex gap-2 items-center justify-center">
    <Input
      id="first-color"
      type="text"
      placeholder="First color"
      className="mt-2"
    />
    <Input
      id="second-color"
      type="text"
      placeholder="Second color"
      className="mt-2"
    />
  </div>
  <button
    id="resultRGB"
    class="h-9 mt-2 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
  >
    <span class="text-lg font-medium" id="resultRGBText">RGB</span>
  </button>
  <button
    id="resultHex"
    class="h-9 mt-2 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
  >
    <span class="text-lg font-medium" id="resultHexText">HEX</span>
  </button>
  <script is:inline>
    const firstColor = document.getElementById("first-color");
    const secondColor = document.getElementById("second-color");
    const resultRGB = document.getElementById("resultRGB");
    const resultHex = document.getElementById("resultHex");
    const resultRGBText = document.getElementById("resultRGBText");
    const resultHexText = document.getElementById("resultHexText");

    function convertToRGB(color) {
      // HEX to RGB
      if (/^#([0-9A-F]{3}){1,2}$/i.test(color)) {
        let r = parseInt(color.slice(1, 3), 16);
        let g = parseInt(color.slice(3, 5), 16);
        let b = parseInt(color.slice(5, 7), 16);
        return { r, g, b };
      }

      // RGB (already in RGB format)
      if (/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/i.test(color)) {
        const [r, g, b] = color.match(/\d+/g).map(Number);
        return { r, g, b };
      }

      // HSL to RGB
      if (/^hsl\((\d+),\s*(\d+)%?,\s*(\d+)%?\)$/i.test(color)) {
        let [h, s, l] = color.match(/\d+/g).map(Number);
        s /= 100;
        l /= 100;

        let c = (1 - Math.abs(2 * l - 1)) * s;
        let x = c * (1 - Math.abs(((h / 60) % 2) - 1));
        let m = l - c / 2;

        let [r, g, b] =
          h < 60
            ? [c, x, 0]
            : h < 120
              ? [x, c, 0]
              : h < 180
                ? [0, c, x]
                : h < 240
                  ? [0, x, c]
                  : h < 300
                    ? [x, 0, c]
                    : [c, 0, x];

        r = Math.round((r + m) * 255);
        g = Math.round((g + m) * 255);
        b = Math.round((b + m) * 255);

        return { r, g, b };
      }

      // OKLCH to RGB (approximated)
      if (
        /^oklch\((\d+(\.\d+)?),\s*(\d+(\.\d+)?),\s*(\d+(\.\d+)?)\)$/i.test(
          color
        )
      ) {
        let [l, c, h] = color.match(/\d+(\.\d+)?/g).map(Number);
        h = (h / 360) * 2 * Math.PI; // Convert from degrees to radians

        let x = c * Math.cos(h);
        let y = c * Math.sin(h);
        let z = (l + 0.5) * 255;

        return { r: Math.round(x), g: Math.round(y), b: Math.round(z) };
      }

      throw new Error("Unsupported color format");
    }

    function getTextColor(bgColor) {
      const temp = document.createElement("div");
      temp.style.color = bgColor;
      document.body.appendChild(temp);
      const computed = getComputedStyle(temp).color;
      document.body.removeChild(temp);

      const match = computed.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)/);
      if (!match) return "black";

      const [r, g, b] = match.slice(1, 4).map(Number);

      const toLinear = (c) => {
        c /= 255;
        return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
      };
      const luminance =
        0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);

      const whiteContrast = 1.05 / (luminance + 0.05);
      const blackContrast = (luminance + 0.05) / 0.05;

      return whiteContrast > blackContrast ? "white" : "black";
    }

    firstColor.addEventListener("input", () => {
      const firstRGB = convertToRGB(firstColor.value);
      const secondRGB = convertToRGB(secondColor.value);

      const resultRed = Math.round((firstRGB.r + secondRGB.r) / 2);
      const resultGreen = Math.round((firstRGB.g + secondRGB.g) / 2);
      const resultBlue = Math.round((firstRGB.b + secondRGB.b) / 2);
      resultRGB.style.backgroundColor = `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`;
      resultRGBText.textContent = `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`;
      resultRGBText.style.color = getTextColor(
        `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`
      );
      resultHexText.textContent = `#${resultRed.toString(16).padStart(2, "0")}${resultGreen.toString(16).padStart(2, "0")}${resultBlue.toString(16).padStart(2, "0")}`;
    });

    secondColor.addEventListener("input", () => {
      const firstRGB = convertToRGB(firstColor.value);
      const secondRGB = convertToRGB(secondColor.value);

      const resultRed = Math.round((firstRGB.r + secondRGB.r) / 2);
      const resultGreen = Math.round((firstRGB.g + secondRGB.g) / 2);
      const resultBlue = Math.round((firstRGB.b + secondRGB.b) / 2);
      resultRGB.style.backgroundColor = `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`;
      resultRGBText.textContent = `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`;
      resultRGBText.style.color = getTextColor(
        `rgb(${resultRed}, ${resultGreen}, ${resultBlue})`
      );
      resultHexText.textContent = `#${resultRed.toString(16).padStart(2, "0")}${resultGreen.toString(16).padStart(2, "0")}${resultBlue.toString(16).padStart(2, "0")}`;
    });

    resultRGB.addEventListener("click", () => {
      const original = resultRGBText.textContent;
      navigator.clipboard.writeText(original);
      resultRGBText.textContent = "Copied!";
      setTimeout(() => (resultRGBText.textContent = original), 1000);
    });

    resultHex.addEventListener("click", () => {
      const original = resultHexText.textContent;
      navigator.clipboard.writeText(original);
      resultHexText.textContent = "Copied!";
      setTimeout(() => (resultHexText.textContent = original), 1000);
    });
  </script>
</ToolLayout>
