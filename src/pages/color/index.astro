---
import Input from "../../components/ui/input.astro";
import ToolLayout from "../../layouts/ToolLayout.astro";
---

<ToolLayout
  title="Color converter - free online tools"
  shortTitle="Color converter"
  description="Convert many color formats quickly with this free online tool."
>
  <Input
    id="color-input"
    type="text"
    placeholder="Enter a color (hex, rgb, hsl, name...)"
    className="mt-2"
  />

  <!-- Copy buttons in uniform preview style -->
  <div
    id="copy-options"
    class="grid grid-cols-1 sm:grid-cols-4 gap-2 mt-2"
    style="display: none;"
  >
    <div
      id="copy-rgb"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
    >
      RGB
    </div>
    <div
      id="copy-hex"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
    >
      HEX
    </div>
    <div
      id="copy-hsl"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
    >
      HSL
    </div>
    <div
      id="copy-oklch"
      class="h-9 rounded-md border-1 border-input w-full scale-100 select-none cursor-pointer transition-all transform-content hover:scale-105 flex items-center justify-center"
    >
      OKLCH
    </div>
  </div>
</ToolLayout>

<script is:inline>
  const input = document.getElementById("color-input");
  const copyHex = document.getElementById("copy-hex");
  const copyRgb = document.getElementById("copy-rgb");
  const copyHsl = document.getElementById("copy-hsl");
  const copyOklch = document.getElementById("copy-oklch");
  const copyOptions = document.getElementById("copy-options");

  input.addEventListener("input", () => {
    const val = input.value.trim();
    const color = parseColor(val.toLowerCase());

    if (color) {
      const { hex, rgb, hsl, oklch } = color;

      copyRgb.style.backgroundColor = hex;
      copyRgb.style.color = getTextColor(hex);
      copyOptions.style.display = "grid";

      setupCopy(copyHex, hex);
      setupCopy(copyRgb, rgb);
      setupCopy(copyHsl, hsl);
      setupCopy(copyOklch, oklch);

      copyHex.textContent = hex;
      copyRgb.textContent = rgb;
      copyHsl.textContent = hsl;
      copyOklch.textContent = oklch;
    } else {
      preview.style.display = "none";
      copyOptions.style.display = "none";
    }
  });

  function setupCopy(el, text) {
    el.onclick = () => {
      navigator.clipboard.writeText(text);
      const original = el.textContent;
      el.textContent = "Copied!";
      setTimeout(() => (el.textContent = original), 1000);
    };
  }

  function parseColor(input) {
    const temp = document.createElement("div");
    temp.style.color = input;
    document.body.appendChild(temp);

    const computed = getComputedStyle(temp).color;
    document.body.removeChild(temp);

    const match = computed.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    if (!match) return null;

    const r = parseInt(match[1]),
      g = parseInt(match[2]),
      b = parseInt(match[3]);
    const hex = rgbToHex(r, g, b);
    const rgb = `rgb(${r}, ${g}, ${b})`;
    const hsl = rgbToHsl(r, g, b);
    const oklch = rgbToOklch(r, g, b);

    return { hex, rgb, hsl, oklch };
  }

  function rgbToHex(r, g, b) {
    return "#" + [r, g, b].map((x) => x.toString(16).padStart(2, "0")).join("");
  }

  function rgbToHsl(r, g, b) {
    r /= 255;
    g /= 255;
    b /= 255;
    const max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    let h = 0,
      s = 0,
      l = (max + min) / 2;

    if (max !== min) {
      const d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }

    return `hsl(${Math.round(h * 360)}, ${Math.round(s * 100)}%, ${Math.round(l * 100)}%)`;
  }

  function rgbToOklch(r, g, b) {
    // Convert to linear RGB
    const srgbToLinear = (v) => {
      v /= 255;
      return v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
    };
    const lr = srgbToLinear(r);
    const lg = srgbToLinear(g);
    const lb = srgbToLinear(b);

    // Convert to XYZ
    const X = 0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb;
    const Y = 0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb;
    const Z = 0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb;

    // Convert to Lab using D65 white point
    const f = (t) =>
      t > 216 / 24389 ? Math.cbrt(t) : (24389 / 27) * t + 16 / 116;

    const L = 116 * f(Y) - 16;
    const a = 500 * (f(X) - f(Y));
    const bVal = 200 * (f(Y) - f(Z));

    // Convert to OKLCH using approximations
    const C = Math.sqrt(a * a + bVal * bVal);
    const h = (Math.atan2(bVal, a) * 180) / Math.PI;
    const H = h < 0 ? h + 360 : h;

    return `oklch(${L.toFixed(1)}% ${C.toFixed(3)} ${H.toFixed(1)})`;
  }

  function getTextColor(bgColor) {
    const temp = document.createElement("div");
    temp.style.color = bgColor;
    document.body.appendChild(temp);
    const computed = getComputedStyle(temp).color;
    document.body.removeChild(temp);

    const match = computed.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)/);
    if (!match) return "black";

    const [r, g, b] = match.slice(1, 4).map(Number);

    const toLinear = (c) => {
      c /= 255;
      return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
    };
    const luminance =
      0.2126 * toLinear(r) + 0.7152 * toLinear(g) + 0.0722 * toLinear(b);

    const whiteContrast = 1.05 / (luminance + 0.05);
    const blackContrast = (luminance + 0.05) / 0.05;

    return whiteContrast > blackContrast ? "white" : "black";
  }
</script>
